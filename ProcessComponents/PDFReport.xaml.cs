using System.Globalization;
using System.IO;
using System.Linq;
using System;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using AKBUtilities;
using iTextSharp.text.pdf;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using Image = iTextSharp.text.Image;
using Paragraph = iTextSharp.text.Paragraph;
using static iTextSharp.text.pdf.events.IndexEvents;
using ScottPlot;
using ScottPlot.Plottables;
using HorizontalAlignment = System.Windows.HorizontalAlignment;

namespace Projekt1;

public partial class PDFReport : Window
{
    private string targetPath => Path.Combine(App.directoryManager.get_directory_path(DirectoryType.Stats)
                                          , "loadcellreport.pdf");
    private string imgPath = "";
    private Plot   boxes;
    public PDFReport(Plot ip)
    {
        InitializeComponent();
        boxes = ip;
        var img = Path.Combine(App.directoryManager.get_directory_path(DirectoryType.Stats), "loadcellreportImg.png");
        imgPath = ip.SavePng(img, 800, 500).Path;
        pdfWebViewer.Navigate(new Uri("about:blank"));
        SaveReport(imgPath);
        pdfWebViewer.Navigate(targetPath);
        Closed += PDFReport_Closed;
    }

    private void PDFReport_Closed(object sender, EventArgs e)
    {
        pdfWebViewer.Dispose();
        Thread.Sleep(1000);
        File.Delete(imgPath);
        File.Delete(targetPath);
    }

    internal bool SaveReport(string imgPath)
    {
        //PDF
        using var filestream = new FileStream(targetPath, FileMode.CreateNew);

        var doc = new Document();
        PdfWriter.GetInstance(doc, filestream);
        doc.Open();

        var bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        var hf = BaseFont.CreateFont(BaseFont.TIMES_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        var tf = BaseFont.CreateFont(BaseFont.HELVETICA_BOLD, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        var Descrfont    = new Font(bf, 10, Font.BOLD);
        var Contentfont  = new Font(bf, 8, Font.NORMAL);
        var Headerfont   = new Font(tf, 20, Font.NORMAL);
        var dgHeaderfont = new Font(hf, 12, Font.BOLD);

        var Header = new Paragraph(new Chunk("LOADCELL REPORT", Headerfont));
        var UCName = new Paragraph(new Chunk(string.Format("Generated by : {0}", "Me"), Descrfont));
        var DateName = new Paragraph(new Chunk(string.Format("Time : {0}", DateTime.Now), Descrfont));

        Header.Alignment = Element.ALIGN_CENTER;
        UCName.Alignment = Element.ALIGN_CENTER;
        DateName.Alignment = Element.ALIGN_CENTER;

        var jpg = Image.GetInstance(imgPath);
        jpg.ScaleToFit(doc.PageSize);
        jpg.Alignment = Image.ALIGN_CENTER;
        jpg.Alignment = Image.MIDDLE_ALIGN;

        doc.Add(new Paragraph(Header));
        doc.Add(new Paragraph(UCName));
        doc.Add(new Paragraph(DateName));
        doc.Add(new Paragraph("Inter Quartile Range", dgHeaderfont));
        doc.Add(jpg);

        var table = new PdfPTable(6);
        table.DefaultCell.Padding = 3;
        table.WidthPercentage = 100;
        table.HorizontalAlignment = Element.ALIGN_CENTER;
        table.TotalWidth = 75f;

        
        table.AddCell(new PdfPCell(new Phrase("LoadCell No.", dgHeaderfont)) { HorizontalAlignment = (int)HorizontalAlignment.Right });
        table.AddCell(new PdfPCell(new Phrase("Minimum", dgHeaderfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
        table.AddCell(new PdfPCell(new Phrase("1st Quartile", dgHeaderfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
        table.AddCell(new PdfPCell(new Phrase("Median", dgHeaderfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
        table.AddCell(new PdfPCell(new Phrase("3rd Quartile", dgHeaderfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
        table.AddCell(new PdfPCell(new Phrase("Maximum   ", dgHeaderfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
        table.HeaderRows = 1;

        var plottables = boxes.GetPlottables<BoxPlot>().ToList();
        var box      = plottables[0].Boxes;


        for (int i = 0; i < box.Count; i++)
        {
            table.AddCell(new PdfPCell(new Phrase(3, $"{i + 1}", Descrfont)) { HorizontalAlignment = (int)HorizontalAlignment.Right });
            table.AddCell(new PdfPCell(new Phrase(3, $"{box[i].WhiskerMin:0.000}", Contentfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
            table.AddCell(new PdfPCell(new Phrase(3, $"{box[i].BoxMin:0.000}", Contentfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
            table.AddCell(new PdfPCell(new Phrase(3, $"{box[i].BoxMiddle:0.000}", Contentfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
            table.AddCell(new PdfPCell(new Phrase(3, $"{box[i].BoxMax:0.000}", Contentfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
            table.AddCell(new PdfPCell(new Phrase(3, $"{box[i].WhiskerMax:0.000}", Contentfont)) { HorizontalAlignment = (int)HorizontalAlignment.Center });
        }

        doc.Add(table);
        doc.Close();
        

        return true;
    }

}


